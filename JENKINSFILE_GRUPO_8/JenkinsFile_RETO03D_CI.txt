pipeline {
    agent none
    options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
    }
    stages {
        stage('Get Code') {
            agent {
                label 'ubuntu'
                
            }
            steps {
            
                // Clean before build
                cleanWs()
                // Obtener cÃ³digo del repo de la rama develop
                git branch: 'develop', url: 'https://github.com/DarwinMMC/todo-list-aws.git'
                sh '''
                    whoami
                    hostname
                '''
                stash name :'code', includes : '**'
            }
        }
        stage('Static') {
            parallel{
                stage('flake8'){
                    agent {
                        label 'static_analysis'
                    }
                    steps {
                        unstash name: 'code'
                        sh '''
                            whoami
                            hostname
                            flake8 --exit-zero --format=pylint src > flake8.out
                        '''
                        recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')]
                    }
                }
                stage('bandit') {
                    agent {
                        label 'static_analysis'
                        
                    }
                    steps {
                        unstash name: 'code'
                	    sh '''
                	        whoami
                            hostname
                			bandit --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                		'''
                		recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')]
                	}
                }
            }
        }
            stage('Deploy') {
           agent {
               label 'ubuntu'
               
           }
           steps {
                sh '''
                    whoami
                    hostname
                    sam build
                    sam deploy --stack-name "todo-list-aws" --region "us-east-1" --resolve-s3 --no-fail-on-empty-changeset --on-failure DO_NOTHING
                    sam list endpoints --stack-name todo-list-aws --region us-east-1 --output json | grep https | head -n 1 | sed 's/\"//g; s/,//g' | tr -d '[:space:]' > BASE_URL.txt
                '''
                 stash includes: 'BASE_URL.txt', name: 'BASE_URL'
            }
        }
        
        stage('Rest') {
            agent {
                label 'integration_testing'
                
            }
            steps {
                unstash name: 'code'
                unstash name: 'BASE_URL'
                sh '''
                    whoami
                    hostname
                    export BASE_URL=$(cat BASE_URL.txt)
                    pytest --junitxml=result-rest.xml test/integration/todoApiTest.py
                '''
                junit 'result-rest.xml'
            }
        }
        
        // config global variables $GIT_ACCESS_TOKEN on jenkins management > system > global property and add new global variable
        stage('Promote') {
            agent {
                label 'ubuntu'
                
            }
            steps {
                sh '''
                    whoami
                    hostname
                    git remote set-url origin https://x-access-token:$GIT_ACCESS_TOKEN@github.com/DarwinMMC/todo-list-aws.git
                    git checkout master
                    git merge develop
                    git push origin master
                '''
            }
        }
    
    }
    post {
        // Clean after build
        always {
            node('ubuntu'){
                cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                               [pattern: '.propsfile', type: 'EXCLUDE']])  
                
            }
        }
    }
}
